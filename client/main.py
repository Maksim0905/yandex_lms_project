from PyQt6 import QtWidgets, uic
from PyQt6.QtWidgets import QMessageBox, QInputDialog
from PyQt6.QtCore import QTimer  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º QTimer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
import sys
import os
import api  # –í–∞—à –º–æ–¥—É–ª—å API
from chess import ChessBoard

class MyApp(QtWidgets.QMainWindow):
    def __init__(self):
        super(MyApp, self).__init__()
        uic.loadUi('main.ui', self)

        self.games = []  # –ò–≥—Ä—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ API
        self.token = None
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ QComboBox
        self.populate_games()

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤
        self.pushButton.clicked.connect(self.play_game)
        self.pushButton_2.clicked.connect(self.refresh_games)
        self.pushButton_3.clicked.connect(self.create_game)

        self.update_lcd()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.username = self.load_username()
        self.display_username()

        # –ù–∞—Å—Ç—Ä–æ–∏–º —Ç–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–≥—Ä—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.refresh_games)  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –º–µ—Ç–æ–¥—É refresh_games
        self.timer.start(10000)  # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5000 –º—Å (5 —Å–µ–∫—É–Ω–¥)

    def populate_games(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç QComboBox —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å API."""
        self.comboBox.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä —á–µ—Ä–µ–∑ API
        games_from_api = api.get_names()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ API
        
        if games_from_api:
            if games_from_api:  # –ï—Å–ª–∏ –∏–≥—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã
                self.games = games_from_api  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
                self.comboBox.addItems(self.games)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã –≤ ComboBox
            else:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
                self.create_game()
        else:
            pass


    def update_lcd(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç QLCDNumber –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä."""
        count = len(self.games)
        self.lcdNumber.display(count)

    def play_game(self):
        """–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '‚ñ∂ –ò–≥—Ä–∞—Ç—å'."""
        selected_game = self.comboBox.currentText()
        if selected_game:
            print(selected_game)
            token = api.get_token_by_game_name(selected_game)
            print(token)
            status = api.get_status(token)
            print(status, type(status))
            if status == '0':
                game = ChessBoard(token=token, player_1=self.username, player_2=None, turn=self.username, title_name = selected_game)
                game.start_background_update()
                game.setParent(self)
                chessboard_width = game.width()
                chessboard_height = game.height()

                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
                self.resize(chessboard_width, chessboard_height)
                self.setWindowTitle(selected_game)
                self.update()
                game.show()
                api.edit_status_by_token(token)
            elif status == '1':
                player_1 = api.get_player_1_by_token(token)
                api.edit_player_2_by_token(token, self.username)
                game = ChessBoard(token=token, player_1=player_1, player_2=self.username, turn=player_1, title_name = selected_game)
                game.start_background_update()
                game.setParent(self)
                chessboard_width = game.width()
                chessboard_height = game.height()

                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
                self.resize(chessboard_width, chessboard_height)
                self.setWindowTitle(selected_game)
                self.update()
                game.show()
                api.edit_status_by_token(token)
            
            elif status == '2':
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")


            # QMessageBox.information(self, "–ò–≥—Ä–∞—Ç—å", f"–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã: {selected_game}")
        else:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É.")

    def refresh_games(self):
        """–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ 'üîÑ' –∏–ª–∏ —Ç–∞–π–º–µ—Ä–µ."""
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã —Å API
        self.populate_games()
        self.update_lcd()

    def create_game(self):
        """–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É'."""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        text, ok = QInputDialog.getText(self, "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:")
        if ok and text:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
            player_1 = api.load_username()
            
            if not player_1:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ username.txt.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ API
            new_game_data = api.create_game(game_name=text, turn=player_1)  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∏–≥—Ä—ã –∏ —á–µ–π —Ö–æ–¥
            if new_game_data:
                # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
                self.populate_games()
                self.update_lcd()
                QMessageBox.information(self, "–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã", f"–ò–≥—Ä–∞ '{text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É.")


    def load_username(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        if os.path.exists("username.txt"):
            with open("username.txt", "r") as file:
                return file.read().strip()
        else:
            return None

    def save_username(self, username):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª."""
        with open("username.txt", "w") as file:
            file.write(username)

    def display_username(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É."""
        if self.username:
            self.label.setText(f"–ü—Ä–∏–≤–µ—Ç, {self.username}!")
        else:
            self.ask_for_username()

    def ask_for_username(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        text, ok = QInputDialog.getText(self, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        if ok and text:
            self.username = text
            self.save_username(text)
            self.display_username()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = MyApp()
    window.setWindowTitle("–ò–≥—Ä–æ–≤—ã–µ –ö–æ–º–Ω–∞—Ç—ã")
    window.show()
    sys.exit(app.exec())
